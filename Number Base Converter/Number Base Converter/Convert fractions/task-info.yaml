type: edu
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/NumeralSystemConverterTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.math.BigDecimal;
    import java.math.BigInteger;
    import java.math.RoundingMode;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;

    public class NumeralSystemConverterTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate () {

            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(this::test1),
                    new TestCase<String>().setDynamicTesting(this::test2),
                    new TestCase<String>().setDynamicTesting(this::test3),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test4),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test5),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test6),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test7),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test8),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test9)
            );
        }

        String getConversionResult(String[] lines) {
            for (String line : lines) {
                if (line.contains(":")) {
                    return line.substring(line.indexOf(":") + 1).trim();
                }
            }

            throw new WrongAnswer(
                "Cannot find a \"Conversion result:\" part in the output.");
        }

        //test exit command
        CheckResult test1 () {

            TestedProgram main = new TestedProgram();
            String output = main.start().toLowerCase();

            if (!output.contains("source base") || !output.contains("target base") || !output
                    .contains("/exit")) {
                return CheckResult
                        .wrong("Your program should output the message \"Enter two numbers in format:" +
                                       " {source base} {target base} (To quit type /exit)\" when it starts");
            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //test output format
        CheckResult test2 () {

            TestedProgram main = new TestedProgram();
            String output;
            String randomDecimal;
            String actualResult;
            String userResult;
            String lastLine;
            String[] lines;

            main.start();
            output = main.execute("10 2").toLowerCase();
            if (!output.contains("base 10") || !output.contains("convert to base 2")) {
                return CheckResult.wrong("Your program should prompt the user for the number to be " +
                                                 "converted with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base}" +
                                                 " (To go back type /back)\" after accepting the " +
                                                 "source and target base");
            }

            if (!output.contains("/back")) {
                return CheckResult.wrong("Your program should provide the user with an option to go " +
                                                 "back to the top-level menu with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base} " +
                                                 "(To go back type /back)\"");
            }

            randomDecimal = Generator.getRandomSourceNumber(10, false);
            actualResult = Converter.decimalToBaseX(randomDecimal, 2);

            output = main.execute(randomDecimal).toLowerCase();
            lines = output.trim().split("\n");
            lastLine = lines[lines.length - 1];

            if (!lines[0].contains("result:")) {
                return CheckResult.wrong("Your program should print the conversion result in the " +
                                                 "format \"Conversion result: CONVERTED_NUMBER\"");
            }

            userResult = getConversionResult(lines);

            if (!userResult.equals(actualResult)) {
                return CheckResult.wrong("The conversion result of your program is wrong");
            }

            if (main.isFinished()) {
                return CheckResult.wrong("Your program should not terminate until the user enter " +
                                                 "\"/exit\" in the top-level menu");
            }

            if (lastLine.contains("/exit")) {
                return CheckResult.wrong("Your program should remember the user's source and target " +
                                                 "base and should not return to the top-level menu " +
                                                 "until the user enters \"/back\"");
            }

            if (!lastLine.contains("base 10") || !lastLine.contains("convert to base 2")) {
                return CheckResult.wrong("After each conversion, your program should prompt the user" +
                                                 " for a number to be " +
                                                 "converted with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base}" +
                                                 " (To go back type /back)\" until the user enters " +
                                                 "\"/back\"");
            }


            return CheckResult.correct();
        }

        //test back command
        CheckResult test3 () {

            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String[] lines;


            main.start();
            main.execute("10 2");
            main.execute(Generator.getRandomSourceNumber(10, false));

            output = main.execute("/back").toLowerCase();
            if (!output.contains("/exit")) {
                return CheckResult.wrong("Your program should take the user back to the top-level " +
                                                 "menu when they enter \"/back\"");
            }

            main.execute("10 8");
            output = main.execute(Generator.getRandomSourceNumber(10, false)).toLowerCase();

            lines = output.trim().split("\n");
            lastLine = lines[lines.length - 1];
            if (!lastLine.contains("base 10") || !lastLine.contains("convert to base 8")) {
                return CheckResult.wrong("After each conversion, your program should prompt the user" +
                                                 " for a number to be " +
                                                 "converted with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base}" +
                                                 " (To go back type /back)\" until the user enters " +
                                                 "\"/back\"");
            }

            main.execute("/back");
            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //using BigInteger
        CheckResult test4 () {

            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomBigInteger;
            String[] lines;

            main.start();

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomBigInteger = Generator.getRandomBigInteger(sourceBase, false);
                    actualResult = Converter
                            .convertSourceToTargetBase(randomBigInteger, sourceBase, targetBase
                                    , false);

                    output = main.execute(randomBigInteger).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.equalsIgnoreCase(actualResult)) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test5 () {

            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomBigInteger;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomBigInteger = Generator.getRandomBigInteger(sourceBase, false);
                    actualResult = Converter
                            .convertSourceToTargetBase(randomBigInteger, sourceBase, targetBase
                                    , false);

                    output = main.execute(randomBigInteger).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.equalsIgnoreCase(actualResult)) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //test fraction conversion
        CheckResult test6 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomSourceNumber(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    if (!actualResult.contains(userResult.substring(0, userResult.indexOf(".") + 2))) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test7 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomSourceNumber(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    if (!actualResult.contains(userResult.substring(0, userResult.indexOf(".") + 2))) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //test fraction using biginteger
        CheckResult test8 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            Converter.setIsBigDec(true);

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomBigInteger(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    boolean correct = CheckConversion.check(userResult, actualResult);
                    if (!correct) {
                        return CheckResult.wrong("The conversion result of your program is wrong\n" +
                            "Your answer:\n" + userResult + "\n" +
                            "Correct answer:\n" + actualResult);
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test9 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomBigInteger(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    boolean correct = CheckConversion.check(userResult, actualResult);
                    if (!correct) {
                        return CheckResult.wrong("The conversion result of your program is wrong\n" +
                            "Your answer:\n" + userResult + "\n" +
                            "Correct answer:\n" + actualResult);
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

    }

    class Generator {

        private static String dec;

        static String getRandomSourceNumber (int sourceBase, boolean fraction) {

            if (fraction) {
                double number = new Random().nextDouble() * 1000;
                dec = String.valueOf(number);

                return Converter.fractionToBaseX(dec, sourceBase);
            } else {
                int n = new Random().nextInt(1000);

                return Integer.toString(n, sourceBase);
            }

        }

        static String getDec () {

            return dec;
        }

        static String getRandomBigInteger (int sourceBase, boolean fraction) {

            if (fraction) {

                BigDecimal max = new BigDecimal("500000000000000.0");
                BigDecimal randFromDouble = BigDecimal.valueOf(Math.random());
                BigDecimal actualRandomDec = randFromDouble.multiply(max);

                actualRandomDec = actualRandomDec.setScale(10, RoundingMode.FLOOR);
                dec = actualRandomDec.toString();

                return Converter.fractionToBaseX(dec, sourceBase);
            } else {

                BigInteger upperLimit = new BigInteger("500000000000000");
                BigInteger randomNumber;
                do {
                    randomNumber = new BigInteger(upperLimit.bitLength(), new Random());
                } while (randomNumber.compareTo(upperLimit) >= 0);

                return randomNumber.toString(sourceBase);
            }

        }
    }

    class Converter {

        static boolean isBigDec = false;

        static void setIsBigDec (boolean bigDec) {

            isBigDec = bigDec;
        }

        static String decimalToBaseX (String num, int targetBase) {

            return new BigInteger(num).toString(targetBase);
        }


        static String baseXToDecimal (String number, int sourceBase) {

            BigInteger integer = new BigInteger(number, sourceBase);
            return integer.toString();
        }

        static String convertSourceToTargetBase (String number, int sourceBase, int targetBase,
                                                 boolean fraction) {

            if (fraction) {

                //Step 1- Convert to decimal
                String decimalResult = isBigDec ? Generator.getDec() : baseXToDecimalFraction(number,
                                                                                              number.length(),
                                                                                              sourceBase);

                //Step 2- Convert to target base
                String result = fractionToBaseX(decimalResult, targetBase);
                return result;
            } else {

                //Step 1 - convert source number to decimal
                String decimal = baseXToDecimal(number, sourceBase);

                //Step 2 - convert decimal to target base
                return decimalToBaseX(decimal, targetBase);
            }

        }

        static String fractionToBaseX (String number, int targetBase) {

            String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".toLowerCase();

            StringBuilder output = new StringBuilder();
            BigDecimal doubleOfDecInp = new BigDecimal(number);

            BigInteger beforeDot = new BigDecimal(number).toBigInteger();
            output.append(beforeDot.toString(targetBase));

            BigDecimal bfd = new BigDecimal(beforeDot);

            doubleOfDecInp = doubleOfDecInp.subtract(bfd);

            output.append(".");

            BigInteger subtract = new BigDecimal(String.valueOf(doubleOfDecInp)).toBigInteger();
            BigDecimal bdOfDecInp = new BigDecimal(String.valueOf(doubleOfDecInp));
            BigDecimal bdFractionalPart = bdOfDecInp.subtract(new BigDecimal(subtract));
            double fractionalPart = bdFractionalPart.doubleValue();

            if (!isBigDec) {

                for (int i = 0; i < targetBase; ++i) {

                    fractionalPart = fractionalPart * targetBase;
                    int digit = (int) fractionalPart;
                    char c = digits.charAt(digit);

                    output.append(c);

                    fractionalPart = fractionalPart - digit;

                    if (fractionalPart == 0) {
                        break;
                    }
                }

            } else {

                for (int i = 0; i < number.length(); ++i) {

                    fractionalPart = fractionalPart * targetBase;
                    int digit = (int) fractionalPart;
                    char c = digits.charAt(digit);

                    output.append(c);

                    fractionalPart = fractionalPart - digit;

                    if (fractionalPart == 0) {
                        break;
                    }
                }

            }

            while (output.toString().split("\\.")[1].length() < 5) {
                output.append("0");
            }

            return output.toString();
        }

        static String baseXToDecimalFraction (String number, int len, int sourceBase) {

            String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            number = number.toUpperCase();

            // Fetch the radix point
            int point = number.indexOf('.');

            // Update point if not found
            if (point == -1) {
                point = len;
            }

            BigDecimal integralPart = new BigDecimal(0);
            BigDecimal fractionalPart = new BigDecimal(0);
            BigDecimal multiplier = new BigDecimal(1);

            // Convert integral part of number to decimal
            // equivalent

            BigDecimal sourceBaseBig = new BigDecimal(sourceBase);
            if (number.matches("\\d+.\\d*")) {
                for (int i = point - 1; i >= 0; i--) {
                    char c = number.charAt(i);

                    BigDecimal holder = new BigDecimal(c - '0');
                    integralPart = integralPart.add((holder.multiply(multiplier)));
                    multiplier = multiplier.multiply(sourceBaseBig);
                }

                // Convert fractional part of number to
                // decimal equivalent

                multiplier = sourceBaseBig;
                for (int i = point + 1; i < len; i++) {

                    char c = number.charAt(i);

                    BigDecimal holder = new BigDecimal((c - '0'));
                    fractionalPart = fractionalPart.add((holder).divide(multiplier, 10,
                                                                        RoundingMode.HALF_UP));
                    multiplier = multiplier.multiply(new BigDecimal(String.valueOf(sourceBase)));
                }
            } else {
                for (int i = 0; i < point; i++) {
                    char c = number.charAt(i);
                    int d = digits.indexOf(c);
                    integralPart =
                            (sourceBaseBig.multiply(integralPart)).add(new BigDecimal(d));

                }

                multiplier = sourceBaseBig;
                for (int i = point + 1; i < len; i++) {
                    char c = number.charAt(i);
                    int d = digits.indexOf(c);
                    BigDecimal holder = new BigDecimal(d);
                    fractionalPart = fractionalPart.add((holder).divide(multiplier, 10,
                                                                        RoundingMode.HALF_UP));
                    multiplier = multiplier.multiply(sourceBaseBig);
                }

            }

            String result = (integralPart.add(fractionalPart)).toString();
            return result;
        }

    }

    class CheckConversion {

        static boolean check (String userResult, String actualResult) {

            String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".toLowerCase();
            String[] arrUser = userResult.split("\\.");
            String[] arrActual = actualResult.split("\\.");
            String decimalPartUser = arrUser[1];
            String decimalPartActual = arrActual[1];

            if (!arrUser[0].equals(arrActual[0])) {
                return false;
            }

            char firstDigit = decimalPartUser.charAt(0);
            char firstDigitActual = decimalPartActual.charAt(0);
            int resultIndex = digits.indexOf(firstDigitActual);

            if (firstDigit != firstDigitActual) {
                char maxChar = 'Z';
                char minChar = '0';

                if (firstDigit == maxChar) {
                    return digits.indexOf(firstDigit - 1) == firstDigitActual;
                } else if (firstDigit == minChar) {
                    return digits.indexOf(firstDigit + 1) == firstDigitActual;
                } else {
                    return digits.indexOf(firstDigit) + 1 == resultIndex || digits
                            .indexOf(firstDigit) - 1 == resultIndex;
                }

            } else {
                return true;
            }

        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/13096#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #8

    The fractional part of your conversion should only be 5 digits in length

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    [last 250 lines of output are shown, 26 skipped]
    Enter number in base 2 to convert to base 17 (To go back type /back) &gt; 1110000111100101111101011110010010000110111101011.10001100110011001100110011
    Conversion result: e86fbgaca90c.95g29

    Enter number in base 2 to convert to base 17 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 2 20
    Enter number in base 2 to convert to base 20 (To go back type /back) &gt; 1010101011101011110000101101111001010011001000010.11001100110011001100110011
    Conversion result: 1ge1jih26d5e.fjjjj

    Enter number in base 2 to convert to base 20 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 2 23
    Enter number in base 2 to convert to base 23 (To go back type /back) &gt; 1001010011101010001001101000000101110111001001011.01001100110011001100110011
    Conversion result: 7kie5lm341m.6kg26

    Enter number in base 2 to convert to base 23 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 2 26
    Enter number in base 2 to convert to base 26 (To go back type /back) &gt; 111001100010101100000001000011101011101001000111.10011001100110011001100110
    Conversion result: 1kfmjjc3op5.fffff

    Enter number in base 2 to convert to base 26 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 2 29
    Enter number in base 2 to convert to base 29 (To go back type /back) &gt; 1000110100011011110101010100011100110100010100100.00011001100110011001100110
    Conversion result: lb8hn6qjqn.2q2q2

    Enter number in base 2 to convert to base 29 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 2 32
    Enter number in base 2 to convert to base 32 (To go back type /back) &gt; 1101000001101001011101011100011100011111011101111.01100110011001100110011001
    Conversion result: d0qblosfnf.cpj6c

    Enter number in base 2 to convert to base 32 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 2 35
    Enter number in base 2 to convert to base 35 (To go back type /back) &gt; 1111111011000100111000111000011011010001001001.1100110011001100110011001
    Conversion result: v3fvpwm1j.ryyyy

    Enter number in base 2 to convert to base 35 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 2
    Enter number in base 5 to convert to base 2 (To go back type /back) &gt; 203004230333324323444.21111111111111111111111111
    Conversion result: 101110000000000110011101100010100110111111111000.01110

    Enter number in base 5 to convert to base 2 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 8
    Enter number in base 5 to convert to base 8 (To go back type /back) &gt; 441442212324021142423.23333333333333333333333333
    Conversion result: 15163167321037660.43146

    Enter number in base 5 to convert to base 8 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 11
    Enter number in base 5 to convert to base 11 (To go back type /back) &gt; 241100330210040232203.03333333333333333333333333
    Conversion result: 7960501347218a.17171

    Enter number in base 5 to convert to base 11 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 14
    Enter number in base 5 to convert to base 14 (To go back type /back) &gt; 140312420321002313134.32444444444444444444444034
    Conversion result: 3102c4b672276.a1197

    Enter number in base 5 to convert to base 14 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 17
    Enter number in base 5 to convert to base 17 (To go back type /back) &gt; 124400111102221420014.41333333333333333333332422
    Conversion result: 4755cbg2db07.ed754

    Enter number in base 5 to convert to base 17 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 20
    Enter number in base 5 to convert to base 20 (To go back type /back) &gt; 1141210142332331000.424111111111111111111114
    Conversion result: a47a87eif0.i5c48

    Enter number in base 5 to convert to base 20 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 23
    Enter number in base 5 to convert to base 23 (To go back type /back) &gt; 411430423304413321032.40000
    Conversion result: 9jaf3799kmd.i94di

    Enter number in base 5 to convert to base 23 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 26
    Enter number in base 5 to convert to base 26 (To go back type /back) &gt; 131040320422223340424.10303030303030303030303030
    Conversion result: 12npcnm4p02.5m2ff

    Enter number in base 5 to convert to base 26 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 29
    Enter number in base 5 to convert to base 29 (To go back type /back) &gt; 331214233142034341342.23333333333333333333333333
    Conversion result: o1gbj1pb7e.frfrf

    Enter number in base 5 to convert to base 29 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 32
    Enter number in base 5 to convert to base 32 (To go back type /back) &gt; 113430342120313120333.32222222222222222222222222
    Conversion result: 3lmi5c4i1f.mcpj6

    Enter number in base 5 to convert to base 32 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 5 35
    Enter number in base 5 to convert to base 35 (To go back type /back) &gt; 332403440024004220214.30000
    Conversion result: 4h90olss7e.l1111

    Enter number in base 5 to convert to base 35 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 2
    Enter number in base 8 to convert to base 2 (To go back type /back) &gt; 12501607426105174.463146314631463146
    Conversion result: 1010101000001110000111100010110001000101001111100.10011

    Enter number in base 8 to convert to base 2 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 5
    Enter number in base 8 to convert to base 5 (To go back type /back) &gt; 325403231426146.0300406111564570652
    Conversion result: 3410341330100434130.01041

    Enter number in base 8 to convert to base 5 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 11
    Enter number in base 8 to convert to base 11 (To go back type /back) &gt; 104161024456576.333310550345300406
    Conversion result: 1548235234885.47937

    Enter number in base 8 to convert to base 11 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 14
    Enter number in base 8 to convert to base 14 (To go back type /back) &gt; 346765036234306.0450753412172702436
    Conversion result: 3cc35c38cc62.102d2

    Enter number in base 8 to convert to base 14 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 17
    Enter number in base 8 to convert to base 17 (To go back type /back) &gt; 14067400106407710.146314631463146315
    Conversion result: c758737g2g41.36da3

    Enter number in base 8 to convert to base 17 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 20
    Enter number in base 8 to convert to base 20 (To go back type /back) &gt; 11026603521623432.40000
    Conversion result: 1b1abhcac3i2.a0000

    Enter number in base 8 to convert to base 20 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 23
    Enter number in base 8 to convert to base 23 (To go back type /back) &gt; 4430643450071073.431463146314631464
    Conversion result: 3jjdb3bkf3a.celjc

    Enter number in base 8 to convert to base 23 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 26
    Enter number in base 8 to convert to base 26 (To go back type /back) &gt; 613563064763657.55341217270243656
    Conversion result: 505kc7ookn.ibooo

    Enter number in base 8 to convert to base 26 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 29
    Enter number in base 8 to convert to base 29 (To go back type /back) &gt; 10731732544447100.431463146314631464
    Conversion result: limf3rsj5e.frfrf

    Enter number in base 8 to convert to base 29 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 32
    Enter number in base 8 to convert to base 32 (To go back type /back) &gt; 7260136131044364.40000
    Conversion result: 7b0bom8i7k.g0000

    Enter number in base 8 to convert to base 32 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 8 35
    Enter number in base 8 to convert to base 35 (To go back type /back) &gt; 7042407762556513.20000
    Conversion result: 35eu5sptkm.8q8q8

    Enter number in base 8 to convert to base 35 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 2
    Enter number in base 11 to convert to base 2 (To go back type /back) &gt; 106928752450a62.2222222222222222a3a9267297
    Conversion result: 1011011001110100001110000010101001010100100001011.00110

    Enter number in base 11 to convert to base 2 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 5
    Enter number in base 11 to convert to base 5 (To go back type /back) &gt; 93257025809445.888888888888889084a3a47058
    Conversion result: 314023041233233003143.40000

    Enter number in base 11 to convert to base 5 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 8
    Enter number in base 11 to convert to base 8 (To go back type /back) &gt; a7734a54125181.00000
    Conversion result: 12375613161037114.00000

    Enter number in base 11 to convert to base 8 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 14
    Enter number in base 11 to convert to base 14 (To go back type /back) &gt; 121748119637287.60606060606060635776774330
    Conversion result: 801a4644000a5.79b2b

    Enter number in base 11 to convert to base 14 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 17
    Enter number in base 11 to convert to base 17 (To go back type /back) &gt; 1701148935850a.0a987654320a9876784559a95
    Conversion result: 1b0a86f48gaf.1902f

    Enter number in base 11 to convert to base 17 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 20
    Enter number in base 11 to convert to base 20 (To go back type /back) &gt; a285260a152929.66666666666666651303587526
    Conversion result: 1eb51e0gf781.c0000

    Enter number in base 11 to convert to base 20 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 23
    Enter number in base 11 to convert to base 23 (To go back type /back) &gt; 63a21a01395378.69696969696969696969696969
    Conversion result: 56j9kaf1380.e8e8e

    Enter number in base 11 to convert to base 23 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 26
    Enter number in base 11 to convert to base 26 (To go back type /back) &gt; 120478a83619592.4a4a4a4a4a4a4a50590575a349
    Conversion result: 34neebnl3hh.bi555

    Enter number in base 11 to convert to base 26 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 29
    Enter number in base 11 to convert to base 29 (To go back type /back) &gt; 354803186882.1910963115253a36512a775
    Conversion result: 1smlkikak.4nk0a

    Enter number in base 11 to convert to base 29 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 32
    Enter number in base 11 to convert to base 32 (To go back type /back) &gt; 35847aa6940235.06060606060606063577677433
    Conversion result: 3ektmpqaus.1j6cp

    Enter number in base 11 to convert to base 32 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 11 35
    Enter number in base 11 to convert to base 35 (To go back type /back) &gt; 6a71a8823930a6.888888888888889084a3a47058
    Conversion result: 31t2fn68ks.s0000

    Enter number in base 11 to convert to base 35 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 14 2
    Enter number in base 14 to convert to base 2 (To go back type /back) &gt; 1a8131c4145a6.b6a11973cc46a0096d9175420
    Conversion result: 10110101000010101011111111111101111100001010110.11010

    Enter number in base 14 to convert to base 2 (To go back type /back) &gt; /back

    Enter two numbers in format: {source base} {target base} (To quit type /exit) &gt; 14 5
    Enter number in base 14 to convert to base 5 (To go back type /back) &gt; 83562808cd352.b2b2b2b2b2b2b39086c9bc05a5
    Conversion result: 442221304210120044004.411100

    Enter number in base 14 to convert to base 5 (To go back type /back)
  time: Tue, 02 Aug 2022 15:38:01 UTC
record: -1
