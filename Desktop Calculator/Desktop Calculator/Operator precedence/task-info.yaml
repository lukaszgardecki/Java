type: edu
files:
- name: src/calculator/ApplicationRunner.java
  visible: true
  text: |
    package calculator;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new Calculator();
        }
    }
  learner_created: false
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    import javax.swing.*;

    public class Calculator extends JFrame {

        public Calculator() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 400);
            setLayout(null);
            setVisible(true);
        }
    }
  learner_created: false
- name: test/CalculatorTest.java
  visible: false
  text: |-
    import calculator.Calculator;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.Map;

    import static java.util.Map.entry;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class CalculatorTest extends SwingTest {

        private Map<Character, JButtonFixture> charToButtonMap;

        @SwingComponent(name = "Equals")
        private JButtonFixture mEqual;
        @SwingComponent(name = "Add")
        private JButtonFixture mAdd;
        @SwingComponent(name = "Subtract")
        private JButtonFixture mSub;
        @SwingComponent(name = "Divide")
        private JButtonFixture mDiv;
        @SwingComponent(name = "Multiply")
        private JButtonFixture mMult;
        @SwingComponent(name = "Zero")
        private JButtonFixture mZero;
        @SwingComponent(name = "One")
        private JButtonFixture mOne;
        @SwingComponent(name = "Two")
        private JButtonFixture mTwo;
        @SwingComponent(name = "Three")
        private JButtonFixture mThree;
        @SwingComponent(name = "Four")
        private JButtonFixture mFour;
        @SwingComponent(name = "Five")
        private JButtonFixture mFive;
        @SwingComponent(name = "Six")
        private JButtonFixture mSix;
        @SwingComponent(name = "Seven")
        private JButtonFixture mSeven;
        @SwingComponent(name = "Eight")
        private JButtonFixture mEight;
        @SwingComponent(name = "Nine")
        private JButtonFixture mNine;
        @SwingComponent(name = "Dot")
        private JButtonFixture mDot;
        @SwingComponent(name = "Clear")
        private JButtonFixture mClear;
        @SwingComponent(name = "Delete")
        private JButtonFixture mDel;

        @SwingComponent(name = "EquationLabel")
        private JLabelFixture mEquationLabel;
        @SwingComponent(name = "ResultLabel")
        private JLabelFixture mResultLabel;

        private final String divideSymbol = "\u00F7";
        private final String multiplySymbol = "\u00D7";
        private final String addSymbol = "\u002B";
        private final String subtractSymbol = "-";

        public CalculatorTest() {

            super(new Calculator());
        }

        private void typeText (String text, String expectedResult, boolean checkResult) {

            for (int i = 0; i < text.length(); i++) {
                JButtonFixture button = charToButtonMap.get(text.charAt(i));
                button.click();
            }
            try {
                if (checkResult) {
                    if (!mResultLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer("Result Label contains wrong number.\n" +
                            "    Your output: " + mResultLabel.text().trim() +
                            "\nExpected output: " + expectedResult);
                    }
                } else {
                    if (!mEquationLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer("Equation Label contains wrong number.\n" +
                            "    Your output: " + mEquationLabel.text()
                            .trim() + "\n" +
                            "Expected output: " + expectedResult);
                    }
                }
            } catch (NullPointerException e) {
                throw new WrongAnswer("Either Equation Label or Result Label is empty.");
            }

            mClear.click();
        }

        private void typeText (String text, String expectedResult, boolean checkResult,
                               String feedBack) {

            for (int i = 0; i < text.length(); i++) {
                JButtonFixture button = charToButtonMap.get(text.charAt(i));
                button.click();
            }
            try {
                if (checkResult) {
                    if (!mResultLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer(feedBack + "\n" + "Your output: " + mResultLabel.text() +
                                "\nExpected output: " + expectedResult);
                    }
                } else {
                    if (!mEquationLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer(feedBack + "\n" + "Your output: " + mEquationLabel.text() +
                                "\nExpected output: " + expectedResult);
                    }
                }
            } catch (NullPointerException e) {
                throw new WrongAnswer("Either Equation Label or Result Label is empty.");
            }

            mClear.click();
        }

        @DynamicTest
        CheckResult test1 () {

            charToButtonMap = Map.ofEntries(
                entry('0', mZero),
                entry('1', mOne),
                entry('2', mTwo),
                entry('3', mThree),
                entry('4', mFour),
                entry('5', mFive),
                entry('6', mSix),
                entry('7', mSeven),
                entry('8', mEight),
                entry('9', mNine),
                entry('+', mAdd),
                entry('-', mSub),
                entry('*', mMult),
                entry('/', mDiv),
                entry('=', mEqual),
                entry('.', mDot),
                entry('<', mDel),
                entry('C', mClear)

            );

            requireEnabled(mEqual, mAdd, mSub, mDiv, mMult, mOne, mTwo, mThree, mFour, mFive, mSix,
                mSeven, mEight, mNine, mZero, mDot, mClear, mDel, mEquationLabel,
                mResultLabel);

            requireVisible(mEqual, mAdd, mSub, mDiv, mMult, mOne, mTwo, mThree, mFour, mFive, mSix,
                mSeven, mEight, mNine, mZero, mDot, mClear, mDel, mEquationLabel,
                mResultLabel);

            return correct();
        }

        @DynamicTest()
        CheckResult test2 () {

            typeText("1", "1", false);
            typeText("1<", "", false,
                "Clicking on the Delete Button should delete the last character from the EquationLabel");
            typeText("111C", "", false,
                "Clicking on the Clear Button should delete all the characters from the EquationLabel");

            return correct();
        }

        // Pushing buttons
        @DynamicTest()
        CheckResult test3 () {

            typeText("1", "1", false);
            typeText("2", "2", false);
            typeText("3", "3", false);
            typeText("4", "4", false);
            typeText("5", "5", false);
            typeText("6", "6", false);
            typeText("7", "7", false);
            typeText("8", "8", false);
            typeText("9", "9", false);
            typeText("0", "0", false);
            typeText("+", "+", false);
            typeText("-", "-", false);
            typeText("*", multiplySymbol, false);
            typeText("/", divideSymbol, false);
            typeText(".", ".", false);

            return correct();
        }

        //Testing calculations
        @DynamicTest()
        CheckResult test4 () {
            typeText("9+1=", "10", true);
            typeText("1-99=", "-98", true);
            typeText("9/2=", "4.5", true);
            typeText("0/7=", "0", true);
            typeText("4.5*2=", "9", true);

            return correct();
        }

        //Test operator precedence
        @DynamicTest()
        CheckResult test5 () {
            //Add & Subtract
            typeText("11-5+4=", "10", true);
            typeText("2-17+5=", "-10", true);


            //Multiply & Divide
            typeText("9/2*8=", "36", true);

            //Combined
            typeText("2+3-5*6=", "-25", true);
            typeText("16+9-7/5=", "23.6", true);
            typeText("25+9/3-8*8=", "-36", true);
            typeText("3.8*7.5/2.5*5=", "57", true);
            typeText("9.2/2.3*12/2.4=", "20", true);

            return correct();
        }

    }
  learner_created: false
- name: src/calculator/ResultPanel.java
  visible: true
  text: |
    package calculator;

    import javax.swing.*;

    public class ResultPanel extends JPanel {
        public static JTextField txtF;

        public ResultPanel() {
            setBounds(0, 0, 400, 100);
            //setBackground(Color.BLUE);
            setLayout(null);

            txtF = new JTextField();
            txtF.setBounds(45, 35, 300, 35);
            txtF.setName("EquationTextField");
            add(txtF);

        }
    }
  learner_created: true
- name: src/calculator/KeyPanel.java
  visible: true
  text: |
    package calculator;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;

    public class KeyPanel extends JPanel implements ActionListener {

        public KeyPanel() {
            setBounds(25,100,335,250);
            //setBackground(Color.ORANGE);
            setLayout(new GridLayout(4, 4, 25, 25));

            Key key7 = new Key();
            key7.setText("7");
            key7.setName("Seven");
            key7.setActionCommand("7");
            key7.addActionListener(this);
            add(key7);

            Key key8 = new Key();
            key8.setText("8");
            key8.setName("Eight");
            key8.setActionCommand("8");
            key8.addActionListener(this);
            add(key8);

            Key key9 = new Key();
            key9.setText("9");
            key9.setName("Nine");
            key9.setActionCommand("9");
            key9.addActionListener(this);
            add(key9);

            Key keyDiv = new Key();
            keyDiv.setText("/");
            keyDiv.setName("Divide");
            keyDiv.setActionCommand("/");
            keyDiv.addActionListener(this);
            add(keyDiv);

            Key key4 = new Key();
            key4.setText("4");
            key4.setName("Four");
            key4.setActionCommand("4");
            key4.addActionListener(this);
            add(key4);

            Key key5 = new Key();
            key5.setText("5");
            key5.setName("Five");
            key5.setActionCommand("5");
            key5.addActionListener(this);
            add(key5);

            Key key6 = new Key();
            key6.setText("6");
            key6.setName("Six");
            key6.setActionCommand("6");
            key6.addActionListener(this);
            add(key6);

            Key keyMult = new Key();
            keyMult.setText("x");
            keyMult.setName("Multiply");
            keyMult.setActionCommand("*");
            keyMult.addActionListener(this);
            add(keyMult);

            Key key1 = new Key();
            key1.setText("1");
            key1.setName("One");
            key1.setActionCommand("1");
            key1.addActionListener(this);
            add(key1);

            Key key2 = new Key();
            key2.setText("2");
            key2.setName("Two");
            key2.setActionCommand("2");
            key2.addActionListener(this);
            add(key2);

            Key key3 = new Key();
            key3.setText("3");
            key3.setName("Three");
            key3.setActionCommand("3");
            key3.addActionListener(this);
            add(key3);

            Key keyPlus = new Key();
            keyPlus.setText("+");
            keyPlus.setName("Add");
            keyPlus.setActionCommand("+");
            keyPlus.addActionListener(this);
            add(keyPlus);

            Key empty = new Key();
            empty.setVisible(false);
            add(empty);

            Key key0 = new Key();
            key0.setText("0");
            key0.setName("Zero");
            key0.setActionCommand("0");
            key0.addActionListener(this);
            add(key0);

            Key keyEqual = new Key();
            keyEqual.setText("=");
            keyEqual.setName("Equals");
            keyEqual.setActionCommand("=");
            keyEqual.addActionListener(this);
            add(keyEqual);

            Key keyMinus = new Key();
            keyMinus.setText("-");
            keyMinus.setName("Subtract");
            keyMinus.setActionCommand("-");
            keyMinus.addActionListener(this);
            add(keyMinus);
        }

        @Override
        public void actionPerformed(ActionEvent ae) {
            String event = ae.getActionCommand();
            String textIn;
            String textNew;
            System.out.println(event);

            switch (event) {
                case "1":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "1");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "2":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "2");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "3":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "3");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "4":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "4");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "5":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "5");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "6":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "6");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "7":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "7");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "8":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "8");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "9":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "9");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "0":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "0");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "-":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "-");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "+":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "+");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "/":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "/");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "*":
                    textIn = ResultPanel.txtF.getText();
                    textNew = String.format(textIn + "x");
                    ResultPanel.txtF.setText(textNew);
                    break;
                case "=":
                    textIn = ResultPanel.txtF.getText();
                    String[] numTab = {};
                    int result = 0;


                    if (textIn.contains("+")) {
                        numTab = textIn.split("\\+");
                        result = Integer.parseInt(String.valueOf(numTab[0])) +
                                 Integer.parseInt(String.valueOf(numTab[1]));
                    } else if (textIn.contains("-")) {
                        numTab = textIn.split("-");
                        result = Integer.parseInt(String.valueOf(numTab[0])) -
                                Integer.parseInt(String.valueOf(numTab[1]));
                    } else if (textIn.contains("x")) {
                        numTab = textIn.split("x");
                        result = Integer.parseInt(String.valueOf(numTab[0])) *
                                Integer.parseInt(String.valueOf(numTab[1]));
                    } else if (textIn.contains("/")) {
                        numTab = textIn.split("/");
                        result = Integer.parseInt(String.valueOf(numTab[0])) /
                                Integer.parseInt(String.valueOf(numTab[1]));
                    }
                    if(!textIn.equals("")) {
                        ResultPanel.txtF.setText(textIn + "=" + result);
                    }
                    break;

            }
        }


    }
  learner_created: true
- name: src/calculator/Key.java
  visible: true
  text: |
    package calculator;

    import javax.swing.*;
    import java.awt.*;

    public class Key extends JButton {
        public static final Font KEY_FONT = new Font("Courier", Font.BOLD, 30);

        public Key() {
            setFont(KEY_FONT);
            //setBounds(0,0,30,30);


        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13796#comment
status: Unchecked
record: -1
