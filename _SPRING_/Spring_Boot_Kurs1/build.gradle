import java.time.LocalDateTime

plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.auth0:java-jwt:3.8.3'

	//liquibase
	implementation 'org.liquibase:liquibase-core'

	//cache
	implementation 'org.ehcache:ehcache:3.8.1'
	implementation 'javax.cache:chache-api:1.1.1'

	//Spring Cache
	implementation 'org.springframework.boot:spring-boot-starter-chache'

	// SWAGGER:
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.6'
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task generatePostsAndComments() {
	doLast {
		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")
		//posty
		for (int i = 1; i <= 100; i++) {
			dataSql.append("insert into post(id, title, content, created) " +
			"values (${i}, 'Test post ${i}', 'Content ${i}', '" + LocalDateTime.now().minusDays(100 - i) + "');\n")
		}

		//komentarze
		for (int i = 1; i <= 100; i++) {
			int postId = 1 + i / 10
			dataSql.append("insert into comment(id, post_id, content, created) " +
					"values (${i}, ${postId}, 'Comment ${i}', '" + LocalDateTime.now().minusDays(100 - i) + "');\n")
		}
	}
}
